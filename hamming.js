// Generated by CoffeeScript 1.4.0
(function() {
  var NUM_PROMPTS, convertToBitArray, flippedBit, generateHammingCode, input, intro, largestPowerForNum, printArraySingle, promptHammingCode, promptResponse, prompts, setupStep, simulateNetwork;

  convertToBitArray = function(data, maxLength) {
    var bit, i, mask, result, _i;
    if (maxLength == null) {
      maxLength = 32;
    }
    result = [];
    mask = 0x01;
    for (i = _i = 0; 0 <= maxLength ? _i < maxLength : _i > maxLength; i = 0 <= maxLength ? ++_i : --_i) {
      bit = mask & data;
      result.unshift(bit === 0 ? 0 : 1);
      mask *= 2;
    }
    return result;
  };

  printArraySingle = function(arr) {
    var i, string, _i, _ref;
    string = "[ " + arr[0];
    for (i = _i = 1, _ref = arr.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
      string += "," + arr[i];
    }
    string += " ]";
    console.log(string);
    return string;
  };

  largestPowerForNum = function(num) {
    var power;
    power = 0;
    while (num >= 1) {
      power++;
      num /= 2;
    }
    return power;
  };

  simulateNetwork = function(arr) {
    var pos;
    if (Math.random() > 0.20) {
      pos = Math.floor(Math.random() * arr.length);
      arr[pos] += 1;
      arr[pos] %= 2;
      return pos + 1;
    }
    return -1;
  };

  generateHammingCode = function(val) {
    var addToParityBits, binary, code, necBinary, pos, power;
    val = parseInt(val, 10);
    necBinary = largestPowerForNum(val);
    binary = convertToBitArray(val, necBinary + 1);
    addToParityBits = function(num, array) {
      var i, largest, numBinary, power, _i, _ref, _results;
      largest = largestPowerForNum(num);
      numBinary = convertToBitArray(num, largest);
      power = 1;
      _results = [];
      for (i = _i = _ref = numBinary.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        if (numBinary[i] === 1) {
          array[power - 1] += array[num - 1];
          array[power - 1] %= 2;
        }
        _results.push(power *= 2);
      }
      return _results;
    };
    code = [];
    power = 1;
    pos = 1;
    while (binary.length > 0) {
      if (pos === power) {
        code.push(0);
        power *= 2;
      } else {
        code.push(binary.shift());
        addToParityBits(pos, code);
      }
      pos++;
    }
    return code;
  };

  promptHammingCode = function(code) {
    var i, labels, message, power, _i, _ref;
    console.log(" -- Signal Recieved -- ");
    console.log("Coded Message\n");
    message = "    ";
    labels = "    ";
    power = 1;
    for (i = _i = 0, _ref = code.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      message += "  " + code[i] + "  ";
      if (i + 1 === power) {
        labels += " p";
        power *= 2;
      } else {
        labels += " m";
      }
      labels += (i + 1) + " ";
      if (i < 10) {
        labels += " ";
      }
    }
    console.log(message);
    console.log(labels);
    console.log("\nPlease verify the code.");
    return console.log("Enter the number of the bit that was flipped (-1 if all are correct): ");
  };

  intro = function() {
    console.log("The Hamming Story");
    console.log("  One day you were sitting at your computer and chatting with");
    console.log("your friends over IRC. Suddenly your network became very");
    console.log("unreliable and to compensate your friends began sending messages");
    console.log("to you using Hamming encodings. Unfortunetly you forgot to update");
    console.log("your messaging client (again) and it cannot automatically decode");
    console.log("the messages for you. Luckily you are a networks student and know");
    console.log("how the code works!\n");
    console.log("Translate each code as it comes across the wire by either");
    console.log("verifying the message is correct or correcting the bit flipped.");
    console.log("Finish them all to find out what your friends are saying to you!");
    return console.log("");
  };

  input = process.openStdin();

  prompts = 0;

  NUM_PROMPTS = 10;

  flippedBit = -1;

  setupStep = function() {
    var code, val;
    if (prompts < NUM_PROMPTS) {
      val = Math.floor(Math.random() * 20) + 10;
      code = generateHammingCode(val);
      flippedBit = simulateNetwork(code);
      promptHammingCode(code);
      return prompts++;
    } else {
      console.log("Nice job you've decoded the message!");
      console.log("They say: Good luck on your midterm!");
      console.log("");
      console.log(" -- Terminated --");
      return process.exit(0);
    }
  };

  promptResponse = function(data) {
    var val;
    val = parseInt(data, 10);
    if (val !== flippedBit) {
      if (val === -1) {
        console.log("Sorry but it looks like a bit has been flipped.\n");
      } else {
        console.log("That bit looks okay to me.\n");
      }
      return console.log("Enter the number of the bit that was flipped (-1 if all are correct): ");
    } else {
      console.log("Correct! Nice work\n");
      return setupStep();
    }
  };

  intro();

  input.addListener('data', promptResponse);

  setupStep();

}).call(this);
